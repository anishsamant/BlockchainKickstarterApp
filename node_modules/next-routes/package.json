{
  "_args": [
    [
      {
        "raw": "next-routes",
        "scope": null,
        "escapedName": "next-routes",
        "name": "next-routes",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\ANISH\\BlockChainProjects\\kickstarter"
    ]
  ],
  "_from": "next-routes@latest",
  "_id": "next-routes@1.4.2",
  "_inCache": true,
  "_location": "/next-routes",
  "_nodeVersion": "10.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/next-routes_1.4.2_1526896784626_0.18909581222622385"
  },
  "_npmUser": {
    "name": "fridays",
    "email": "braemer+npm@gmail.com"
  },
  "_npmVersion": "6.0.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "next-routes",
    "scope": null,
    "escapedName": "next-routes",
    "name": "next-routes",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/next-routes/-/next-routes-1.4.2.tgz",
  "_shasum": "736a382579a792ea69f35ae70b449acdfefa7944",
  "_shrinkwrap": null,
  "_spec": "next-routes",
  "_where": "C:\\Users\\ANISH\\BlockChainProjects\\kickstarter",
  "author": {
    "name": "fridays"
  },
  "bugs": {
    "url": "https://github.com/fridays/next-routes/issues"
  },
  "dependencies": {
    "path-to-regexp": "^2.1.0"
  },
  "description": "Easy to use universal dynamic routes for Next.js",
  "devDependencies": {
    "@babel/cli": "^7.0.0-beta.47",
    "@babel/core": "^7.0.0-beta.47",
    "@babel/preset-env": "^7.0.0-beta.47",
    "@types/next": "^2.4.8",
    "@types/node": "^10.1.2",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "^8.2.1",
    "babel-jest": "^22.4.3",
    "concurrently": "^3.5.0",
    "coveralls": "^3.0.0",
    "del-cli": "^1.1.0",
    "jest": "^22.4.3",
    "next": "^6.0.0",
    "prop-types": "^15.6.0",
    "react": "^16.0.0",
    "react-dom": "^16.0.0",
    "react-test-renderer": "^16.0.0",
    "standard": "^11.0.1",
    "typescript": "^2.7.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-1Ljs0BEV9IGcJLKxC/WZUtmftSvmkY6DlI8fVs8dClCoR82QRzBGRka/L/XB76wE5814MMeP9qVJYQil0FE9QQ==",
    "shasum": "736a382579a792ea69f35ae70b449acdfefa7944",
    "tarball": "https://registry.npmjs.org/next-routes/-/next-routes-1.4.2.tgz",
    "fileCount": 8,
    "unpackedSize": 20174,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbApiRCRA9TVsSAnZWagAAfRcP/34ZYcG6r+iKd/AC6et9\nSSaVjKQkQbCt+hBnQoe7WjM30bK93l8wU8Q8Xyd4COXwu0muqexsMiW7NIFk\n2pFQ+iTAUGTZvtFKaPL4WKJAIl6wePqAzY4Gsjd0Ao51Bt+Xc1coWVbjJ17N\nja5EnnbDMLvyh642z4dTh28yIoc4SvovthPBAh1fqnQe04HCdCR3KhwVpC2d\n42ZXpDfFpwIl0L5zlTyuctqwqbemWoSSrhf0pBmrgIwR9WYvilFZzS32h0MG\nJIVxrZTHy8j5ZXns3VEgtvgTdefpnvhR1TAW6X4SgO4Yte0seE6waDGDEGZD\nVLvFvFaMnrBr2U32/BDQp5cT9k5fDA0nliwBVBE4LGQpq0Lw50/oID813NhY\nGjMI1nG/fVch0DzC3I3o5JuJcVF4nBJ8Te1cP+pwKMq0beEUV56wBhjzf3sx\ngsZGRkWgplSTS0Cy39z8aHV3bww5IwsbmeOmXYZ0nsHZqJgwwJekZBmQrjkX\nLFtsabf2FVTAOlS3J3p6xaEKAM0VlkW0j7iyjo7WXOGBSqMeS5RyvkkfhMH+\no2gTsyRCJPjnj0+A0S0Ac2kWemus9O2QXnzQkIvrIVnVWIyv2GJpP263BLmJ\nX9sYGq3McXY60UYOTVEPC6+VSf4vrhWx/+cEqhjD3HzIKL8R/1J1flbdPr6U\ni6ia\r\n=v/e3\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist",
    "typings"
  ],
  "gitHead": "d4c8daad0becb6ff8f923ff043705bccbe6d12ea",
  "homepage": "https://github.com/fridays/next-routes#readme",
  "jest": {
    "testEnvironment": "node",
    "roots": [
      "test/",
      "dist/"
    ]
  },
  "keywords": [
    "next",
    "next.js",
    "react",
    "route",
    "router",
    "routes",
    "routing"
  ],
  "license": "MIT",
  "main": "dist",
  "maintainers": [
    {
      "name": "fridays",
      "email": "b.raemer+npm@gmail.com"
    }
  ],
  "name": "next-routes",
  "optionalDependencies": {},
  "peerDependencies": {
    "next": ">=2",
    "react": "^15.4.2 || ^16"
  },
  "readme": "# Dynamic Routes for Next.js\n\n[![npm version](https://d25lcipzij17d.cloudfront.net/badge.svg?id=js&type=6&v=1.4.2&x2=0)](https://www.npmjs.com/package/next-routes) [![Coverage Status](https://coveralls.io/repos/github/fridays/next-routes/badge.svg)](https://coveralls.io/github/fridays/next-routes) [![Build Status](https://travis-ci.org/fridays/next-routes.svg?branch=master)](https://travis-ci.org/fridays/next-routes)\n\nEasy to use universal dynamic routes for [Next.js](https://github.com/zeit/next.js)\n\n- Express-style route and parameters matching\n- Request handler middleware for express & co\n- `Link` and `Router` that generate URLs by route definition\n\n## How to use\n\nInstall:\n\n```bash\nnpm install next-routes --save\n```\n\nCreate `routes.js` inside your project:\n\n```javascript\nconst routes = module.exports = require('next-routes')()\n\nroutes\n.add('about')\n.add('blog', '/blog/:slug')\n.add('user', '/user/:id', 'profile')\n.add('/:noname/:lang(en|es)/:wow+', 'complex')\n.add({name: 'beta', pattern: '/v3', page: 'v3'})\n```\n\nThis file is used both on the server and the client.\n\nAPI:\n\n- `routes.add(name, pattern = /name, page = name)`\n- `routes.add(pattern, page)`\n- `routes.add(object)`\n\nArguments:\n\n- `name` - Route name\n- `pattern` - Route pattern (like express, see [path-to-regexp](https://github.com/pillarjs/path-to-regexp))\n- `page` - Page inside `./pages` to be rendered\n\nThe page component receives the matched URL parameters merged into `query`\n\n```javascript\nexport default class Blog extends React.Component {\n  static async getInitialProps ({query}) {\n    // query.slug\n  }\n  render () {\n    // this.props.url.query.slug\n  }\n}\n```\n\n## On the server\n\n```javascript\n// server.js\nconst next = require('next')\nconst routes = require('./routes')\nconst app = next({dev: process.env.NODE_ENV !== 'production'})\nconst handler = routes.getRequestHandler(app)\n\n// With express\nconst express = require('express')\napp.prepare().then(() => {\n  express().use(handler).listen(3000)\n})\n\n// Without express\nconst {createServer} = require('http')\napp.prepare().then(() => {\n  createServer(handler).listen(3000)\n})\n```\n\nOptionally you can pass a custom handler, for example:\n\n```javascript\nconst handler = routes.getRequestHandler(app, ({req, res, route, query}) => {\n  app.render(req, res, route.page, query)\n})\n```\n\nMake sure to use `server.js` in your `package.json` scripts:\n\n```json\n\"scripts\": {\n  \"dev\": \"node server.js\",\n  \"build\": \"next build\",\n  \"start\": \"NODE_ENV=production node server.js\"\n}\n```\n\n## On the client\n\nImport `Link` and `Router` from your `routes.js` file to generate URLs based on route definition:\n\n### `Link` example\n\n```jsx\n// pages/index.js\nimport {Link} from '../routes'\n\nexport default () => (\n  <div>\n    <div>Welcome to Next.js!</div>\n    <Link route='blog' params={{slug: 'hello-world'}}>\n      <a>Hello world</a>\n    </Link>\n    or\n    <Link route='/blog/hello-world'>\n      <a>Hello world</a>\n    </Link>\n  </div>\n)\n```\n\nAPI:\n\n- `<Link route='name'>...</Link>`\n- `<Link route='name' params={params}> ... </Link>`\n- `<Link route='/path/to/match'> ... </Link>`\n\nProps:\n\n- `route` - Route name or URL to match (alias: `to`)\n- `params` - Optional parameters for named routes\n\nIt generates the URLs for `href` and `as` and renders `next/link`. Other props like `prefetch` will work as well.\n\n### `Router` example\n\n```jsx\n// pages/blog.js\nimport React from 'react'\nimport {Router} from '../routes'\n\nexport default class Blog extends React.Component {\n  handleClick () {\n    // With route name and params\n    Router.pushRoute('blog', {slug: 'hello-world'})\n    // With route URL\n    Router.pushRoute('/blog/hello-world')\n  }\n  render () {\n    return (\n      <div>\n        <div>{this.props.url.query.slug}</div>\n        <button onClick={this.handleClick}>Home</button>\n      </div>\n    )\n  }\n}\n```\n\nAPI:\n\n- `Router.pushRoute(route)`\n- `Router.pushRoute(route, params)`\n- `Router.pushRoute(route, params, options)`\n\nArguments:\n\n- `route` - Route name or URL to match\n- `params` - Optional parameters for named routes\n- `options` - Passed to Next.js\n\nThe same works with `.replaceRoute()` and `.prefetchRoute()`\n\nIt generates the URLs and calls `next/router`\n\n---\n\nOptionally you can provide custom `Link` and `Router` objects, for example:\n\n```javascript\nconst routes = module.exports = require('next-routes')({\n  Link: require('./my/link')\n  Router: require('./my/router')\n})\n```\n\n---\n\n##### Related links\n\n- [zeit/next.js](https://github.com/zeit/next.js) - Framework for server-rendered React applications\n- [path-to-regexp](https://github.com/pillarjs/path-to-regexp) - Express-style path to regexp\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fridays/next-routes.git"
  },
  "scripts": {
    "build": "del dist/* && babel src -d dist",
    "dev": "concurrently -k 'npm run build -- -w' 'npm run testOnly -- --watch'",
    "lint": "standard 'src/*' 'test/*'",
    "prepublishOnly": "npm run test",
    "pretest": "npm run lint && npm run build",
    "test": "npm run testOnly && npm run testTypings",
    "testCI": "npm run test && cat coverage/lcov.info | coveralls",
    "testOnly": "jest \\.test.js --coverage",
    "testTypings": "tsc --project ./typings/tests"
  },
  "standard": {
    "parser": "babel-eslint"
  },
  "typings": "typings/next-routes.d.ts",
  "version": "1.4.2"
}
