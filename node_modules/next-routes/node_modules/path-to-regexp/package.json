{
  "_args": [
    [
      {
        "raw": "path-to-regexp@^2.1.0",
        "scope": null,
        "escapedName": "path-to-regexp",
        "name": "path-to-regexp",
        "rawSpec": "^2.1.0",
        "spec": ">=2.1.0 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\ANISH\\BlockChainProjects\\kickstarter\\node_modules\\next-routes"
    ]
  ],
  "_from": "path-to-regexp@>=2.1.0 <3.0.0",
  "_id": "path-to-regexp@2.4.0",
  "_inCache": true,
  "_location": "/next-routes/path-to-regexp",
  "_nodeVersion": "10.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/path-to-regexp_2.4.0_1535327835872_0.40146254949467464"
  },
  "_npmUser": {
    "name": "blakeembrey",
    "email": "hello@blakeembrey.com"
  },
  "_npmVersion": "6.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "path-to-regexp@^2.1.0",
    "scope": null,
    "escapedName": "path-to-regexp",
    "name": "path-to-regexp",
    "rawSpec": "^2.1.0",
    "spec": ">=2.1.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/next-routes"
  ],
  "_resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-2.4.0.tgz",
  "_shasum": "35ce7f333d5616f1c1e1bfe266c3aba2e5b2e704",
  "_shrinkwrap": null,
  "_spec": "path-to-regexp@^2.1.0",
  "_where": "C:\\Users\\ANISH\\BlockChainProjects\\kickstarter\\node_modules\\next-routes",
  "bugs": {
    "url": "https://github.com/pillarjs/path-to-regexp/issues"
  },
  "component": {
    "scripts": {
      "path-to-regexp": "index.js"
    }
  },
  "dependencies": {},
  "description": "Express style path to RegExp utility",
  "devDependencies": {
    "@types/chai": "^4.0.4",
    "@types/mocha": "^5.2.5",
    "@types/node": "^10.7.1",
    "chai": "^4.1.1",
    "istanbul": "^0.4.5",
    "mocha": "^5.2.0",
    "standard": "^11.0.1",
    "ts-node": "^7.0.1",
    "typescript": "^3.0.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-G6zHoVqC6GGTQkZwF4lkuEyMbVOjoBKAEybQUypI1WTkqinCOrq2x6U2+phkJ1XsEMTy4LjtwPI7HW+NVrRR2w==",
    "shasum": "35ce7f333d5616f1c1e1bfe266c3aba2e5b2e704",
    "tarball": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-2.4.0.tgz",
    "fileCount": 6,
    "unpackedSize": 27372,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbgz5cCRA9TVsSAnZWagAABV8P/j3O5fXfCEuI/D0M4ATo\ny7iDPQB+jEO81v7UbtKjca0IPpr/n1fkcX55Mr/wfzWlksctYk+EbwDVsole\nJAuXy05mirFkPyf78lid9YHnaFnSMUaNlhIz5kkABhPmH67DCYVMdZp6Gtys\ndUIxu//oroXDVd0Z4mmjkUfiToVCDD67uMkOxsJ7d2smR5XMhXfPtl4zHSIL\nJshs1jAuYXgz+zeYfkhMgg1owUqE74ueXORKEqmk8UUT6CNjaxv6tIfqv4DI\nkGnX+oIDOJgw8LaojqAV1sSEDWtD8AnnA5/DeQj/ADhIiLG8Yy4JVPdL3Mo9\nRpsRA8SYetpc3y49uLmlYgXG1A3ayR6RIBmqCWnU5hOrQT5p8kZmvlmRvSL2\nGDrfBW2WdvIBOzZTsOX6nSAg3w7C7abLp/MO1PeanXxmIXQKQ/oAf3asH35U\nJmEYT4Rf6kKnr/JlaweClhyvs91gJgMwSlO/MDeB7tgyFDjRwDJicVj9ue0H\ndYavvdZmr/CO7j4Zfn4ryaY+N4Ao34Ooa563NVj/At40n2HeRYCtik3CONNM\nYvuHwahO7h2limYCcrhTJSXuJ59HQiLedKL3FpYbCwMgGFPmw213GOIAeC+a\nbbZjYpP+fYLZGyxFdiaUwYpfkVkEE08q5zfX9pe7AZffuoqhUsJAH5kl6Nne\n56TB\r\n=8dfi\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js",
    "index.d.ts",
    "LICENSE"
  ],
  "gitHead": "bcba87cbd47d8aa3f826a88a7f6ef5a77072c71a",
  "homepage": "https://github.com/pillarjs/path-to-regexp#readme",
  "keywords": [
    "express",
    "regexp",
    "route",
    "routing"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "blakeembrey",
      "email": "hello@blakeembrey.com"
    },
    {
      "name": "defunctzombie",
      "email": "shtylman@gmail.com"
    },
    {
      "name": "dougwilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "jonathanong",
      "email": "jonathanrichardong@gmail.com"
    },
    {
      "name": "jongleberry",
      "email": "jonathanrichardong@gmail.com"
    }
  ],
  "name": "path-to-regexp",
  "optionalDependencies": {},
  "readme": "# Path-to-RegExp\n\n> Turn a path string such as `/user/:name` into a regular expression.\n\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n## Installation\n\n```\nnpm install path-to-regexp --save\n```\n\n## Usage\n\n```javascript\nvar pathToRegexp = require('path-to-regexp')\n\n// pathToRegexp(path, keys?, options?)\n// pathToRegexp.parse(path)\n// pathToRegexp.compile(path)\n```\n\n- **path** A string, array of strings, or a regular expression.\n- **keys** An array to be populated with keys found in the path.\n- **options**\n  - **sensitive** When `true` the regexp will be case sensitive. (default: `false`)\n  - **strict** When `true` the regexp allows an optional trailing delimiter to match. (default: `false`)\n  - **end** When `true` the regexp will match to the end of the string. (default: `true`)\n  - **start** When `true` the regexp will match from the beginning of the string. (default: `true`)\n  - Advanced options (use for non-pathname strings, e.g. host names):\n    - **delimiter** The default delimiter for segments. (default: `'/'`)\n    - **endsWith** Optional character, or list of characters, to treat as \"end\" characters.\n    - **delimiters** List of characters to consider delimiters when parsing. (default: `'./'`)\n\n```javascript\nvar keys = []\nvar re = pathToRegexp('/foo/:bar', keys)\n// re = /^\\/foo\\/([^\\/]+?)\\/?$/i\n// keys = [{ name: 'bar', prefix: '/', delimiter: '/', optional: false, repeat: false, pattern: '[^\\\\/]+?' }]\n```\n\n**Please note:** The `RegExp` returned by `path-to-regexp` is intended for ordered data (e.g. pathnames, hostnames). It does not handle arbitrary data (e.g. query strings, URL fragments, JSON, etc).\n\n### Parameters\n\nThe path argument is used to define parameters and populate the list of keys.\n\n#### Named Parameters\n\nNamed parameters are defined by prefixing a colon to the parameter name (`:foo`). By default, the parameter will match until the following path segment.\n\n```js\nvar re = pathToRegexp('/:foo/:bar')\n// keys = [{ name: 'foo', prefix: '/', ... }, { name: 'bar', prefix: '/', ... }]\n\nre.exec('/test/route')\n//=> ['/test/route', 'test', 'route']\n```\n\n**Please note:** Parameter names must be made up of \"word characters\" (`[A-Za-z0-9_]`).\n\n#### Parameter Modifiers\n\n##### Optional\n\nParameters can be suffixed with a question mark (`?`) to make the parameter optional.\n\n```js\nvar re = pathToRegexp('/:foo/:bar?')\n// keys = [{ name: 'foo', ... }, { name: 'bar', delimiter: '/', optional: true, repeat: false }]\n\nre.exec('/test')\n//=> ['/test', 'test', undefined]\n\nre.exec('/test/route')\n//=> ['/test', 'test', 'route']\n```\n\n**Tip:** If the parameter is the _only_ value in the segment, the prefix is also optional.\n\n##### Zero or more\n\nParameters can be suffixed with an asterisk (`*`) to denote a zero or more parameter matches. The prefix is taken into account for each match.\n\n```js\nvar re = pathToRegexp('/:foo*')\n// keys = [{ name: 'foo', delimiter: '/', optional: true, repeat: true }]\n\nre.exec('/')\n//=> ['/', undefined]\n\nre.exec('/bar/baz')\n//=> ['/bar/baz', 'bar/baz']\n```\n\n##### One or more\n\nParameters can be suffixed with a plus sign (`+`) to denote a one or more parameter matches. The prefix is taken into account for each match.\n\n```js\nvar re = pathToRegexp('/:foo+')\n// keys = [{ name: 'foo', delimiter: '/', optional: false, repeat: true }]\n\nre.exec('/')\n//=> null\n\nre.exec('/bar/baz')\n//=> ['/bar/baz', 'bar/baz']\n```\n\n#### Custom Matching Parameters\n\nAll parameters can be provided a custom regexp, which overrides the default match (`[^\\/]+`). For example, you can match digits in the path:\n\n```js\nvar re = pathToRegexp('/icon-:foo(\\\\d+).png')\n// keys = [{ name: 'foo', ... }]\n\nre.exec('/icon-123.png')\n//=> ['/icon-123.png', '123']\n\nre.exec('/icon-abc.png')\n//=> null\n```\n\n**Please note:** Backslashes need to be escaped with another backslash in strings.\n\n#### Unnamed Parameters\n\nIt is possible to write an unnamed parameter that only consists of a matching group. It works the same as a named parameter, except it will be numerically indexed.\n\n```js\nvar re = pathToRegexp('/:foo/(.*)')\n// keys = [{ name: 'foo', ... }, { name: 0, ... }]\n\nre.exec('/test/route')\n//=> ['/test/route', 'test', 'route']\n```\n\n### Parse\n\nThe parse function is exposed via `pathToRegexp.parse`. This will return an array of strings and keys.\n\n```js\nvar tokens = pathToRegexp.parse('/route/:foo/(.*)')\n\nconsole.log(tokens[0])\n//=> \"/route\"\n\nconsole.log(tokens[1])\n//=> { name: 'foo', prefix: '/', delimiter: '/', optional: false, repeat: false, pattern: '[^\\\\/]+?' }\n\nconsole.log(tokens[2])\n//=> { name: 0, prefix: '/', delimiter: '/', optional: false, repeat: false, pattern: '.*' }\n```\n\n**Note:** This method only works with strings.\n\n### Compile (\"Reverse\" Path-To-RegExp)\n\nPath-To-RegExp exposes a compile function for transforming a string into a valid path.\n\n```js\nvar toPath = pathToRegexp.compile('/user/:id')\n\ntoPath({ id: 123 }) //=> \"/user/123\"\ntoPath({ id: 'cafÃ©' }) //=> \"/user/caf%C3%A9\"\ntoPath({ id: '/' }) //=> \"/user/%2F\"\n\ntoPath({ id: ':/' }) //=> \"/user/%3A%2F\"\ntoPath({ id: ':/' }, { encode: (value, token) => value }) //=> \"/user/:/\"\n\nvar toPathRepeated = pathToRegexp.compile('/:segment+')\n\ntoPathRepeated({ segment: 'foo' }) //=> \"/foo\"\ntoPathRepeated({ segment: ['a', 'b', 'c'] }) //=> \"/a/b/c\"\n\nvar toPathRegexp = pathToRegexp.compile('/user/:id(\\\\d+)')\n\ntoPathRegexp({ id: 123 }) //=> \"/user/123\"\ntoPathRegexp({ id: '123' }) //=> \"/user/123\"\ntoPathRegexp({ id: 'abc' }) //=> Throws `TypeError`.\n```\n\n**Note:** The generated function will throw on invalid input. It will do all necessary checks to ensure the generated path is valid. This method only works with strings.\n\n### Working with Tokens\n\nPath-To-RegExp exposes the two functions used internally that accept an array of tokens.\n\n* `pathToRegexp.tokensToRegExp(tokens, keys?, options?)` Transform an array of tokens into a matching regular expression.\n* `pathToRegexp.tokensToFunction(tokens)` Transform an array of tokens into a path generator function.\n\n#### Token Information\n\n* `name` The name of the token (`string` for named or `number` for index)\n* `prefix` The prefix character for the segment (`/` or `.`)\n* `delimiter` The delimiter for the segment (same as prefix or `/`)\n* `optional` Indicates the token is optional (`boolean`)\n* `repeat` Indicates the token is repeated (`boolean`)\n* `partial` Indicates this token is a partial path segment (`boolean`)\n* `pattern` The RegExp used to match this token (`string`)\n\n## Compatibility with Express <= 4.x\n\nPath-To-RegExp breaks compatibility with Express <= `4.x`:\n\n* RegExp special characters can only be used in a parameter\n  * Express.js 4.x used all `RegExp` special characters regardless of position - this considered a bug\n* Parameters have suffixes that augment meaning - `*`, `+` and `?`. E.g. `/:user*`\n* No wildcard asterisk (`*`) - use parameters instead (`(.*)`)\n\n## TypeScript\n\nIncludes a [`.d.ts`](index.d.ts) file for TypeScript users.\n\n## Live Demo\n\nYou can see a live demo of this library in use at [express-route-tester](http://forbeslindesay.github.com/express-route-tester/).\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/path-to-regexp.svg?style=flat\n[npm-url]: https://npmjs.org/package/path-to-regexp\n[travis-image]: https://img.shields.io/travis/pillarjs/path-to-regexp.svg?style=flat\n[travis-url]: https://travis-ci.org/pillarjs/path-to-regexp\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/path-to-regexp.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/pillarjs/path-to-regexp?branch=master\n[david-image]: http://img.shields.io/david/pillarjs/path-to-regexp.svg?style=flat\n[david-url]: https://david-dm.org/pillarjs/path-to-regexp\n[license-image]: http://img.shields.io/npm/l/path-to-regexp.svg?style=flat\n[license-url]: LICENSE.md\n[downloads-image]: http://img.shields.io/npm/dm/path-to-regexp.svg?style=flat\n[downloads-url]: https://npmjs.org/package/path-to-regexp\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pillarjs/path-to-regexp.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "npm run lint && npm run test-cov",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --require ts-node/register -R spec test.ts",
    "test-spec": "mocha --require ts-node/register -R spec --bail test.ts"
  },
  "typings": "index.d.ts",
  "version": "2.4.0"
}
